#include <iostream>
#include <time.h>

using namespace std;

void printTree(int heapSize, int *array);
void swap(int firstIndex, int secondIndex, int *array);
void maxHeapify(int *array, int heapSize, int i);
void sort(int *array, int &heapSize);
void siftdown(int *array, int heapSize, int i);

int main() {
  int heapSize = 20;
  int heap[heapSize];
  srand(time(NULL));
  for(int i = 1; i < heapSize; i++) {
    heap[i] = (rand() % 99) + 1;
  }
  printTree(heapSize, heap);

  for(int j = 0; j < 3; j++) {
    for(int i = (heapSize / 2); i >= 1; i--) {
      maxHeapify(heap, heapSize, i);
    }
    printTree(heapSize, heap);
  }

  sort(heap, heapSize);
  cout << "After sort." << endl;
  return 0;
}

//Sifts an element down array until sorted
void siftdown(int *array, int heapSize, int i) {
  int parent = array[i];
  int lchild = (i * 2);
  int rchild = 0;
  if(i < (heapSize / 2)) {
    rchild = (i * 2) + 1;
  }
  if(array[lchild] > parent || array[rchild] > parent) {
    if(array[lchild] > array[rchild]) {
      swap(i, lchild, array);
      maxHeapify(array, heapSize, (i * 2));
    }
    else {
      swap(i, rchild, array);
      maxHeapify(array, heapSize, ((i * 2) + 1));
    }
  }
}

//Heapsort printed to console - Segfaults
void sort(int *array, int &heapSize) {
  int initialSize = heapSize;
  for(int i = 1; i < initialSize; i++) {
    cout << array[1] << " ";
    swap(1, heapSize, array);
    siftdown(array, heapSize, 1);
    heapSize--;
  }
  cout << endl;
}

//swaps two elements in an int array
void swap(int firstIndex, int secondIndex, int *array) {
  int tempValue = array[secondIndex];
  array[secondIndex] = array[firstIndex];
  array[firstIndex] = tempValue;
}

//prints the array
void printTree(int heapSize, int *array) {
  for(int i = 1; i < heapSize; i++) {
    cout << array[i] << " ";
  }
  cout << endl;
}

//siftup that starts from center of the array
void maxHeapify(int *array, int heapSize, int i) {  
  int parent = array[i];
  int lchild = (i * 2);
  int rchild = 0;
  if(i < (heapSize / 2)) {
    rchild = (i * 2) + 1;
  }

  if(array[lchild] > parent || array[rchild] > parent) {
    if(array[lchild] > array[rchild]) {
      //      cout << "Swapping parent: " << parent  << " (" << i << ")" << " with lchild: " << array[lchild]
      //	   << " (" << lchild << ")" << endl;
      swap(i, lchild, array);
      maxHeapify(array, heapSize, (i / 2));
    }
    else {
      //      cout << "Swapping parent: " << parent  << " (" << i << ")" << " with rchild: " << array[rchild]
      //	   << " (" << rchild << ")" << endl;
      swap(i, rchild, array);
      maxHeapify(array, heapSize, ((i - 1) / 2));
    }
  }
}
